{"version":3,"sources":["../../src/babel/extract.js"],"names":["require","relative","dirname","generator","default","isValidElementType","Module","evaluate","slugify","units","unitless","hyphenate","s","replace","match","p1","toLowerCase","isPlainObject","o","constructor","name","toValidCSSIdentifier","toCSS","Object","entries","filter","value","map","key","p2","p3","join","stripLines","loc","text","result","String","trim","start","line","end","repeat","column","imports","t","scope","filename","identifier","source","binding","getAllBindings","p","path","resolveFromFile","id","M","_resolveFilename","paths","_nodeModulePaths","e","isImportingModule","resolve","isImportSpecifier","isImportDeclaration","parentPath","node","isVariableDeclarator","isCallExpression","init","isIdentifier","callee","arguments","length","isStringLiteral","isTemplateLiteral","quasis","cooked","unitRegex","RegExp","module","exports","extract","babel","options","types","visitor","Program","enter","state","rules","index","dependencies","replacements","invalidate","exit","keys","file","metadata","linaria","TaggedTemplateExpression","quasi","tag","styled","css","opts","component","get","isMemberExpression","object","property","stringLiteral","interpolations","displayName","parent","findParent","isObjectProperty","isJSXOpeningElement","buildCodeFrameError","slug","charAt","root","className","cssText","expressions","forEach","el","i","self","appended","matches","last","unit","endsWith","ex","beforeLength","next","confident","push","original","isFunctionExpression","isArrowFunctionExpression","undefined","message","getSource","code","selector","extends","props","objectProperty","it","objectExpression","items","arrayExpression","replaceWith","callExpression","addComment"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\n/* @flow */\n\nconst { relative, dirname } = require('path');\nconst generator = require('@babel/generator').default;\nconst { isValidElementType } = require('react-is');\nconst Module = require('./module');\nconst evaluate = require('./evaluate');\nconst slugify = require('../slugify');\nconst { units, unitless } = require('./units');\n\nconst hyphenate = s =>\n  s\n    // Hyphenate CSS property names from camelCase version from JS string\n    .replace(/([A-Z])/g, (match, p1) => `-${p1.toLowerCase()}`)\n    // Special case for `-ms` because in JS it starts with `ms` unlike `Webkit`\n    .replace(/^ms-/, '-ms-');\n\nconst isPlainObject = o =>\n  typeof o === 'object' && o != null && o.constructor.name === 'Object';\n\nconst toValidCSSIdentifier = s => s.replace(/[^_0-9a-z]/gi, '_');\n\n// Some tools such as polished.js output JS objects\n// To support them transparently, we convert JS objects to CSS strings\nconst toCSS = o =>\n  Object.entries(o)\n    .filter(\n      ([, value]) =>\n        // Ignore all falsy values except numbers\n        typeof value === 'number' || value\n    )\n    .map(([key, value]) => {\n      if (isPlainObject(value)) {\n        return `${hyphenate(key)} { ${toCSS(value)} }`;\n      }\n\n      return `${hyphenate(key)}: ${\n        /* $FlowFixMe */\n        typeof value === 'number' &&\n        value !== 0 &&\n        !unitless[\n          // Strip vendor prefixes when checking if the value is unitless\n          key.replace(\n            /^(Webkit|Moz|O|ms)([A-Z])(.+)$/,\n            (match, p1, p2, p3) => `${p2.toLowerCase()}${p3}`\n          )\n        ]\n          ? `${value}px`\n          : value\n      };`;\n    })\n    .join(' ');\n\n// Stripping away the new lines ensures that we preserve line numbers\n// This is useful in case of tools such as the stylelint pre-processor\n// This should be safe because strings cannot contain newline: https://www.w3.org/TR/CSS2/syndata.html#strings\nconst stripLines = (loc, text) => {\n  let result = String(text)\n    .replace(/[\\r\\n]+/g, ' ')\n    .trim();\n\n  // If the start and end line numbers aren't same, add new lines to span the text across multiple lines\n  if (loc.start.line !== loc.end.line) {\n    result += '\\n'.repeat(loc.end.line - loc.start.line);\n\n    // Add extra spaces to offset the column\n    result += ' '.repeat(loc.end.column);\n  }\n\n  return result;\n};\n\n// Verify if the binding is imported from the specified source\nconst imports = (t, scope, filename, identifier, source) => {\n  const binding = scope.getAllBindings()[identifier];\n\n  if (!binding) {\n    return false;\n  }\n\n  const p = binding.path;\n\n  const resolveFromFile = id => {\n    /* $FlowFixMe */\n    const M = require('module');\n\n    try {\n      return M._resolveFilename(id, {\n        id: filename,\n        filename,\n        paths: M._nodeModulePaths(dirname(filename)),\n      });\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const isImportingModule = value =>\n    // If the value is an exact match, assume it imports the module\n    value === source ||\n    // Otherwise try to resolve both and check if they are the same file\n    resolveFromFile(value) ===\n      // eslint-disable-next-line no-nested-ternary\n      (source === 'linaria'\n        ? require.resolve('../index')\n        : source === 'linaria/react'\n          ? require.resolve('../react/')\n          : resolveFromFile(source));\n\n  if (t.isImportSpecifier(p) && t.isImportDeclaration(p.parentPath)) {\n    return isImportingModule(p.parentPath.node.source.value);\n  }\n\n  if (t.isVariableDeclarator(p)) {\n    if (\n      t.isCallExpression(p.node.init) &&\n      t.isIdentifier(p.node.init.callee) &&\n      p.node.init.callee.name === 'require' &&\n      p.node.init.arguments.length === 1\n    ) {\n      const node = p.node.init.arguments[0];\n\n      if (t.isStringLiteral(node)) {\n        return isImportingModule(node.value);\n      }\n\n      if (t.isTemplateLiteral(node) && node.quasis.length === 1) {\n        return isImportingModule(node.quasis[0].value.cooked);\n      }\n    }\n  }\n\n  return false;\n};\n\n// Match any valid CSS units followed by a separator such as ;, newline etc.\nconst unitRegex = new RegExp(`^(${units.join('|')})(;|,|\\n| |\\\\))`);\n\ntype Location = {\n  line: number,\n  column: number,\n};\n\ntype State = {|\n  rules: {\n    [selector: string]: {\n      className: string,\n      displayName: string,\n      cssText: string,\n      start: ?Location,\n    },\n  },\n  replacements: Array<{\n    original: { start: Location, end: Location },\n    length: number,\n  }>,\n  index: number,\n  dependencies: string[],\n  file: {\n    opts: {\n      cwd: string,\n      root: string,\n      filename: string,\n    },\n    metadata: any,\n  },\n|};\n\nexport type Options = {\n  displayName: boolean,\n  evaluate: boolean,\n  ignore: RegExp,\n};\n\nmodule.exports = function extract(babel: any, options: Options) {\n  const { types: t } = babel;\n\n  return {\n    visitor: {\n      Program: {\n        enter(path: any, state: State) {\n          // Collect all the style rules from the styles we encounter\n          state.rules = {};\n          state.index = 0;\n          state.dependencies = [];\n          state.replacements = [];\n\n          // Invalidate cache for module evaluation to get fresh modules\n          Module.invalidate();\n        },\n        exit(path: any, state: State) {\n          if (Object.keys(state.rules).length) {\n            // Store the result as the file metadata\n            state.file.metadata = {\n              linaria: {\n                rules: state.rules,\n                replacements: state.replacements,\n                dependencies: state.dependencies,\n              },\n            };\n          }\n\n          // Invalidate cache for module evaluation when we're done\n          Module.invalidate();\n        },\n      },\n      TaggedTemplateExpression(path: any, state: State) {\n        const { quasi, tag } = path.node;\n\n        let styled;\n        let css;\n\n        if (\n          imports(\n            t,\n            path.scope,\n            state.file.opts.filename,\n            'styled',\n            'linaria/react'\n          )\n        ) {\n          if (\n            t.isCallExpression(tag) &&\n            t.isIdentifier(tag.callee) &&\n            tag.arguments.length === 1 &&\n            tag.callee.name === 'styled'\n          ) {\n            styled = { component: path.get('tag').get('arguments')[0] };\n          } else if (\n            t.isMemberExpression(tag) &&\n            t.isIdentifier(tag.object) &&\n            t.isIdentifier(tag.property) &&\n            tag.object.name === 'styled'\n          ) {\n            styled = {\n              component: { node: t.stringLiteral(tag.property.name) },\n            };\n          }\n        } else if (\n          imports(t, path.scope, state.file.opts.filename, 'css', 'linaria')\n        ) {\n          css = t.isIdentifier(tag) && tag.name === 'css';\n        }\n\n        if (styled || css) {\n          const interpolations = [];\n\n          // Try to determine a readable class name\n          let displayName;\n\n          const parent = path.findParent(\n            p =>\n              t.isObjectProperty(p) ||\n              t.isJSXOpeningElement(p) ||\n              t.isVariableDeclarator(p)\n          );\n\n          if (parent) {\n            if (t.isObjectProperty(parent)) {\n              displayName = parent.node.key.name || parent.node.key.value;\n            } else if (t.isJSXOpeningElement(parent)) {\n              displayName = parent.node.name.name;\n            } else if (t.isVariableDeclarator(parent)) {\n              displayName = parent.node.id.name;\n            }\n          }\n\n          if (!displayName) {\n            throw path.buildCodeFrameError(\n              \"Couldn't determine a name for the component. Ensure that it's either:\\n\" +\n                '- Assigned to a variable\\n' +\n                '- Is an object property\\n' +\n                '- Is a prop in a JSX element\\n'\n            );\n          }\n\n          // Custom properties need to start with a letter, so we prefix the slug\n          // Also use append the index of the class to the filename for uniqueness in the file\n          const slug = toValidCSSIdentifier(\n            `${displayName.charAt(0).toLowerCase()}${slugify(\n              `${relative(\n                state.file.opts.root,\n                state.file.opts.filename\n              )}:${state.index++}`\n            )}`\n          );\n\n          const className = options.displayName\n            ? `${toValidCSSIdentifier(displayName)}_${slug}`\n            : slug;\n\n          // Serialize the tagged template literal to a string\n          let cssText = '';\n\n          const expressions = path.get('quasi').get('expressions');\n\n          quasi.quasis.forEach((el, i, self) => {\n            let appended = false;\n\n            if (i !== 0) {\n              // Check if previous expression was a CSS variable that we replaced\n              // If it has a unit after it, we need to move the unit into the interpolation\n              // e.g. `var(--size)px` should actually be `var(--size)`\n              // So we check if the current text starts with a unit, and add the unit to the previous interpolation\n              // Another approach would be `calc(var(--size) * 1px), but some browsers don't support all units\n              // https://bugzilla.mozilla.org/show_bug.cgi?id=956573\n              const matches = el.value.cooked.match(unitRegex);\n\n              if (matches) {\n                const last = interpolations[interpolations.length - 1];\n                const [, unit] = matches;\n\n                if (last && cssText.endsWith(`var(--${last.id})`)) {\n                  last.unit = unit;\n                  cssText += el.value.cooked.replace(unitRegex, '$2');\n                  appended = true;\n                }\n              }\n            }\n\n            if (!appended) {\n              cssText += el.value.cooked;\n            }\n\n            const ex = expressions[i];\n\n            if (ex) {\n              const { end } = ex.node.loc;\n              const result = ex.evaluate();\n              const beforeLength = cssText.length;\n\n              // The location will be end of the current string to start of next string\n              const next = self[i + 1];\n              const loc = {\n                // +1 because the expressions location always shows 1 column before\n                start: { line: el.loc.end.line, column: el.loc.end.column + 1 },\n                end: next\n                  ? { line: next.loc.start.line, column: next.loc.start.column }\n                  : { line: end.line, column: end.column + 1 },\n              };\n\n              if (result.confident) {\n                if (isPlainObject(result.value)) {\n                  // If it's a plain object, convert it to a CSS string\n                  cssText += stripLines(loc, toCSS(result.value));\n                } else if (result.value != null) {\n                  // Don't insert anything for null and undefined\n                  cssText += stripLines(loc, result.value);\n                }\n\n                state.replacements.push({\n                  original: loc,\n                  length: cssText.length - beforeLength,\n                });\n              } else {\n                // Try to preval the value\n                if (\n                  options.evaluate &&\n                  !(\n                    t.isFunctionExpression(ex) ||\n                    t.isArrowFunctionExpression(ex)\n                  )\n                ) {\n                  try {\n                    const { value, dependencies } = evaluate(\n                      ex,\n                      t,\n                      state.file.opts.filename,\n                      undefined,\n                      options\n                    );\n\n                    if (typeof value !== 'function') {\n                      // Only insert text for non functions\n                      // We don't touch functions because they'll be interpolated at runtime\n\n                      if (value != null) {\n                        if (\n                          isValidElementType(value) &&\n                          typeof value.className === 'string'\n                        ) {\n                          // If it's an React component with a classname property, use it\n                          // Useful for interpolating components\n                          cssText += `.${value.className}`;\n                        } else if (isPlainObject(value)) {\n                          cssText += stripLines(loc, toCSS(value));\n                        } else {\n                          // For anything else, assume it'll be stringified\n                          cssText += stripLines(loc, value);\n                        }\n                      }\n\n                      state.dependencies.push(...dependencies);\n                      state.replacements.push({\n                        original: loc,\n                        length: cssText.length - beforeLength,\n                      });\n\n                      return;\n                    }\n                  } catch (e) {\n                    throw ex.buildCodeFrameError(\n                      `An error occurred when evaluating the expression: ${\n                        e.message\n                      }. Make sure you are not using a browser or Node specific API.`\n                    );\n                  }\n                }\n\n                if (styled) {\n                  const id = `${slug}-${i}`;\n\n                  interpolations.push({\n                    id,\n                    node: ex.node,\n                    source: ex.getSource() || generator(ex.node).code,\n                    unit: '',\n                  });\n\n                  cssText += `var(--${id})`;\n                } else {\n                  // CSS custom properties can't be used outside components\n                  throw ex.buildCodeFrameError(\n                    `The CSS cannot contain JavaScript expressions when using the 'css' tag. To evaluate the expressions at build time, pass 'evaluate: true' to the babel plugin.`\n                  );\n                }\n              }\n            }\n          });\n\n          let selector = `.${className}`;\n\n          if (styled) {\n            // If `styled` wraps another component and not a primitive,\n            // get its class name to create a more specific selector\n            // it'll ensure that styles are overridden properly\n            if (options.evaluate && t.isIdentifier(styled.component.node)) {\n              let { value } = evaluate(\n                styled.component,\n                t,\n                state.file.opts.filename,\n                undefined,\n                options\n              );\n\n              while (isValidElementType(value) && value.className) {\n                selector += `.${value.className}`;\n                value = value.extends;\n              }\n            }\n\n            const props = [];\n\n            props.push(\n              t.objectProperty(\n                t.identifier('name'),\n                t.stringLiteral(displayName)\n              )\n            );\n\n            props.push(\n              t.objectProperty(\n                t.identifier('class'),\n                t.stringLiteral(className)\n              )\n            );\n\n            // If we found any interpolations, also pass them so they can be applied\n            if (interpolations.length) {\n              // De-duplicate interpolations based on the source and unit\n              // If two interpolations have the same source code and same unit,\n              // we don't need to use 2 custom properties for them, we can use a single one\n              const result = {};\n\n              interpolations.forEach(it => {\n                const key = it.source + it.unit;\n\n                if (key in result) {\n                  cssText = cssText.replace(\n                    `var(--${it.id})`,\n                    `var(--${result[key].id})`\n                  );\n                } else {\n                  result[key] = it;\n                }\n              });\n\n              props.push(\n                t.objectProperty(\n                  t.identifier('vars'),\n                  t.objectExpression(\n                    Object.keys(result).map(key => {\n                      const { id, node, unit } = result[key];\n                      const items = [node];\n\n                      if (unit) {\n                        items.push(t.stringLiteral(unit));\n                      }\n\n                      return t.objectProperty(\n                        t.stringLiteral(id),\n                        t.arrayExpression(items)\n                      );\n                    })\n                  )\n                )\n              );\n            }\n\n            path.replaceWith(\n              t.callExpression(\n                t.callExpression(t.identifier('styled'), [\n                  styled.component.node,\n                ]),\n                [t.objectExpression(props)]\n              )\n            );\n\n            path.addComment('leading', '#__PURE__');\n          } else {\n            path.replaceWith(t.stringLiteral(className));\n          }\n\n          state.rules[selector] = {\n            cssText,\n            className,\n            displayName,\n            start:\n              path.parent && path.parent.loc ? path.parent.loc.start : null,\n          };\n        }\n      },\n    },\n  };\n};\n"],"file":"extract.js"}