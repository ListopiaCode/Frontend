{"version":3,"sources":["../../src/react/styled.js"],"names":["React","require","cx","styled","tag","options","process","env","NODE_ENV","Array","isArray","Error","Result","forwardRef","props","ref","as","component","className","class","rest","vars","style","Object","keys","forEach","name","value","unit","assign","createElement","displayName","extends","module","exports","Proxy","get","o","prop"],"mappings":";;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CAAgC;;;eACjBA,OAAO,CAAC,UAAD,C;IAAdC,E,YAAAA,E;;AAaR,SAASC,MAAT,CAAgBC,GAAhB,EAAsD;AACpD,SAAO,UAACC,OAAD,EAAsB;AAC3B,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIC,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAJ,EAA4B;AAC1B;AACA,cAAM,IAAIM,KAAJ,CACJ,2GADI,CAAN;AAGD;AACF;AAED;;;AACA,QAAMC,MAAM,GAAGZ,KAAK,CAACa,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,sBACaD,KADb,CACtCE,EADsC;AAAA,UAClCC,SADkC,0BACtBb,GADsB;AAAA,UACVc,SADU,GACaJ,KADb,CACjBK,KADiB;AAAA,UACIC,IADJ,4BACaN,KADb;;AAG9CM,MAAAA,IAAI,CAACL,GAAL,GAAWA,GAAX;AACAK,MAAAA,IAAI,CAACF,SAAL,GAAiBhB,EAAE,CAACkB,IAAI,CAACF,SAAL,IAAkBA,SAAnB,EAA8Bb,OAAO,CAACc,KAAtC,CAAnB;AAJ8C,UAMtCE,IANsC,GAM7BhB,OAN6B,CAMtCgB,IANsC;;AAQ9C,UAAIA,IAAJ,EAAU;AACR,YAAMC,KAAK,GAAG,EAAd;AAEAC,QAAAA,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,OAAlB,CAA0B,UAAAC,IAAI,EAAI;AAAA,0CACLL,IAAI,CAACK,IAAD,CADC;AAAA,cACzBC,KADyB;AAAA;AAAA,cAClBC,IADkB,4BACX,EADW;;AAEhCN,UAAAA,KAAK,aAAMI,IAAN,EAAL,aACE,OAAOC,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACb,KAAD,CAAnC,GAA6Ca,KAD/C,SAEGC,IAFH;AAGD,SALD;AAOAR,QAAAA,IAAI,CAACE,KAAL,GAAaC,MAAM,CAACM,MAAP,CAAcP,KAAd,EAAqBF,IAAI,CAACE,KAA1B,CAAb;AACD;AAED;;;AACA,UAAI,OAAOlB,GAAG,CAACc,SAAX,KAAyB,QAAzB,IAAqCd,GAAG,KAAKa,SAAjD,EAA4D;AAC1D;AACA;AACA,eAAOjB,KAAK,CAAC8B,aAAN,CACL1B,GADK,EAELmB,MAAM,CAACM,MAAP,CAAcT,IAAd,EAAoB;AAClBJ,UAAAA,EAAE,EAAEC;AADc,SAApB,CAFK,CAAP;AAMD;;AAED,aAAOjB,KAAK,CAAC8B,aAAN,CAAoBb,SAApB,EAA+BG,IAA/B,CAAP;AACD,KAlCc,CAAf;AAoCAR,IAAAA,MAAM,CAACmB,WAAP,GAAqB1B,OAAO,CAACqB,IAA7B;AACAd,IAAAA,MAAM,CAACM,SAAP,GAAmBb,OAAO,CAACc,KAA3B;AACAP,IAAAA,MAAM,CAACoB,OAAP,GAAiB5B,GAAjB;AAEA,WAAOQ,MAAP;AACD,GApDD;AAqDD;;AAED,IAAIN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCyB,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIC,KAAJ,CAAUhC,MAAV,EAAkB;AACjCiC,IAAAA,GADiC,eAC7BC,CAD6B,EAC1BC,IAD0B,EACpB;AACX,aAAOD,CAAC,CAACC,IAAD,CAAR;AACD;AAHgC,GAAlB,CAAjB;AAKD,CAND,MAMO;AACLL,EAAAA,MAAM,CAACC,OAAP,GAAiB/B,MAAjB;AACD","sourcesContent":["/* @flow */\n\nconst React = require('react'); // eslint-disable-line import/no-extraneous-dependencies\nconst { cx } = require('../index');\n\ntype Options = {\n  name: string,\n  class: string,\n  vars?: {\n    [string]: [\n      string | number | ((props: *) => string | number),\n      string | void,\n    ],\n  },\n};\n\nfunction styled(tag: React.ComponentType<*> | string) {\n  return (options: Options) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (Array.isArray(options)) {\n        // We received a strings array since it's used as a tag\n        throw new Error(\n          'Using the \"styled\" tag in runtime is not supported. Make sure you have set up the Babel plugin correctly.'\n        );\n      }\n    }\n\n    /* $FlowFixMe: Flow doesn't know about forwardRef */\n    const Result = React.forwardRef((props, ref) => {\n      const { as: component = tag, class: className, ...rest } = props;\n\n      rest.ref = ref;\n      rest.className = cx(rest.className || className, options.class);\n\n      const { vars } = options;\n\n      if (vars) {\n        const style = {};\n\n        Object.keys(vars).forEach(name => {\n          const [value, unit = ''] = vars[name];\n          style[`--${name}`] = `${\n            typeof value === 'function' ? value(props) : value\n          }${unit}`;\n        });\n\n        rest.style = Object.assign(style, rest.style);\n      }\n\n      /* $FlowFixMe */\n      if (typeof tag.className === 'string' && tag !== component) {\n        // If the underlying tag is a styled component, forward the `as` prop\n        // Otherwise the styles from the underlying component will be ignored\n        return React.createElement(\n          tag,\n          Object.assign(rest, {\n            as: component,\n          })\n        );\n      }\n\n      return React.createElement(component, rest);\n    });\n\n    Result.displayName = options.name;\n    Result.className = options.class;\n    Result.extends = tag;\n\n    return Result;\n  };\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  module.exports = new Proxy(styled, {\n    get(o, prop) {\n      return o(prop);\n    },\n  });\n} else {\n  module.exports = styled;\n}\n\ntype CSSProperties = {\n  [key: string]: string | number | CSSProperties,\n};\n\ntype StyledComponent<T> = React.ComponentType<T & { as?: React$ElementType }>;\n\ntype StyledTag<T> = (\n  strings: string[],\n  ...exprs: Array<string | number | CSSProperties | (T => string | number)>\n) => StyledComponent<T>;\n\ntype StyledJSXIntrinsics = $ObjMap<\n  $JSXIntrinsics,\n  <T>({ props: T }) => StyledTag<T>\n>;\n\ndeclare module.exports: StyledJSXIntrinsics & {|\n  <T>(T): StyledTag<React.ElementConfig<T>>,\n|};\n"],"file":"styled.js"}