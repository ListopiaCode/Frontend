"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var React = require('react'); // eslint-disable-line import/no-extraneous-dependencies


var _require = require('../index'),
    cx = _require.cx;

function styled(tag) {
  return function (options) {
    if (process.env.NODE_ENV !== 'production') {
      if (Array.isArray(options)) {
        // We received a strings array since it's used as a tag
        throw new Error('Using the "styled" tag in runtime is not supported. Make sure you have set up the Babel plugin correctly.');
      }
    }
    /* $FlowFixMe: Flow doesn't know about forwardRef */


    var Result = React.forwardRef(function (props, ref) {
      var _props$as = props.as,
          component = _props$as === void 0 ? tag : _props$as,
          className = props.class,
          rest = _objectWithoutProperties(props, ["as", "class"]);

      rest.ref = ref;
      rest.className = cx(rest.className || className, options.class);
      var vars = options.vars;

      if (vars) {
        var style = {};
        Object.keys(vars).forEach(function (name) {
          var _vars$name = _slicedToArray(vars[name], 2),
              value = _vars$name[0],
              _vars$name$ = _vars$name[1],
              unit = _vars$name$ === void 0 ? '' : _vars$name$;

          style["--".concat(name)] = "".concat(typeof value === 'function' ? value(props) : value).concat(unit);
        });
        rest.style = Object.assign(style, rest.style);
      }
      /* $FlowFixMe */


      if (typeof tag.className === 'string' && tag !== component) {
        // If the underlying tag is a styled component, forward the `as` prop
        // Otherwise the styles from the underlying component will be ignored
        return React.createElement(tag, Object.assign(rest, {
          as: component
        }));
      }

      return React.createElement(component, rest);
    });
    Result.displayName = options.name;
    Result.className = options.class;
    Result.extends = tag;
    return Result;
  };
}

if (process.env.NODE_ENV !== 'production') {
  module.exports = new Proxy(styled, {
    get: function get(o, prop) {
      return o(prop);
    }
  });
} else {
  module.exports = styled;
}
//# sourceMappingURL=styled.js.map