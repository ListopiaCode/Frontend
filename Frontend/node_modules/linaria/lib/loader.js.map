{"version":3,"sources":["../src/loader.js"],"names":["fs","require","path","mkdirp","normalize","Module","loaderUtils","transform","module","exports","loader","content","inputSourceMap","getOptions","sourceMap","cacheDirectory","rest","outputFilename","join","isAbsolute","process","cwd","relative","resourcePath","replace","result","filename","undefined","pluginOptions","cssText","Buffer","from","cssSourceMapText","toString","dependencies","length","forEach","dep","f","_resolveFilename","id","paths","_nodeModulePaths","dirname","addDependency","e","currentCssText","readFileSync","sync","writeFileSync","callback","code"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst normalize = require('normalize-path');\n/* $FlowFixMe */\nconst Module = require('module');\nconst loaderUtils = require('loader-utils');\nconst transform = require('./transform');\n\nmodule.exports = function loader(content: string, inputSourceMap: ?Object) {\n  const { sourceMap, cacheDirectory = '.linaria-cache', ...rest } =\n    loaderUtils.getOptions(this) || {};\n\n  const outputFilename = path.join(\n    path.isAbsolute(cacheDirectory)\n      ? cacheDirectory\n      : path.join(process.cwd(), cacheDirectory),\n    path.relative(\n      process.cwd(),\n      this.resourcePath.replace(/\\.[^.]+$/, '.linaria.css')\n    )\n  );\n\n  const result = transform(content, {\n    filename: this.resourcePath,\n    inputSourceMap: inputSourceMap != null ? inputSourceMap : undefined,\n    outputFilename,\n    pluginOptions: rest,\n  });\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies && result.dependencies.length) {\n      result.dependencies.forEach(dep => {\n        try {\n          const f = Module._resolveFilename(dep, {\n            id: this.resourcePath,\n            filename: this.resourcePath,\n            paths: Module._nodeModulePaths(path.dirname(this.resourcePath)),\n          });\n\n          this.addDependency(f);\n        } catch (e) {\n          // Ignore\n        }\n      });\n    }\n\n    // Read the file first to compare the content\n    // Write the new content only if it's changed\n    // This will prevent unnecessary WDS reloads\n    let currentCssText;\n\n    try {\n      currentCssText = fs.readFileSync(outputFilename, 'utf-8');\n    } catch (e) {\n      // Ignore error\n    }\n\n    if (currentCssText !== cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n      fs.writeFileSync(outputFilename, cssText);\n    }\n\n    this.callback(\n      null,\n      `${result.code}\\n\\nrequire(\"${normalize(outputFilename)}\")`,\n      result.sourceMap\n    );\n    return;\n  }\n\n  this.callback(null, result.code, result.sourceMap);\n};\n"],"file":"loader.js"}