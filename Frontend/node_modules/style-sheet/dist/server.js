"use strict";

exports.__esModule = true;
exports.createSheet = createSheet;
exports.cssRulesToString = cssRulesToString;
exports.flush = flush;
exports.fromServer = fromServer;

function Sheet() {
  var _this = this;

  this.cssRules = {
    length: 0
  };

  this.insertRule = function (rule, index) {
    if (index === void 0) {
      index = _this.cssRules.length;
    }

    if (index > _this.cssRules.length) {
      throw new Error('IndexSizeError');
    }

    _this.cssRules[index] = {
      cssText: rule
    };
    var insertedIndex = index;

    if (index === _this.cssRules.length) {
      _this.cssRules.length++;
    }

    return insertedIndex;
  };
}

function createSheet() {
  return new Sheet();
}

function cssRulesToString(rules) {
  return Array.prototype.reduce.call(rules, // eslint-disable-next-line prefer-arrow-callback
  function (css, rule) {
    return css + rule.cssText;
  }, '');
}

function flush(sheet) {
  if (typeof window !== 'undefined') {
    throw new Error('This method is only avaliable server side.');
  }

  var css = cssRulesToString(sheet.cssRules);
  sheet.cssRules = {
    length: 0
  };
  return css;
}

function fromServer(sheets) {
  var css = '';
  var sheet = sheets.sheet,
      mediaSheet = sheets.mediaSheet,
      linkSheet = sheets.linkSheet; // We likely are server side rendering.

  if (!sheet.ownerNode) {
    return css;
  }

  css = (sheet.ownerNode.textContent || '') + (mediaSheet.ownerNode.textContent || '');

  if (linkSheet) {
    css += cssRulesToString(linkSheet.cssRules);
  }

  return css;
}
